# —— 一次性生成 IMU+VIS+GNSS 的多模态生成器（gen_bicycle_multi.py）
multi:
  seed: 42
  traj_duration_s: 2000
  rate_hz: 100
  train_routes: 24                    # 训练数据量，增加到24条路由
  val_routes: 4                       # 验证数据量 (20%)
  test_routes: 4                     # 测试数据量 (20%)
  # 严格共轨迹的握手文件（可选）
  save_routes_meta: data_cache/routes_meta.json   # 生成时保存
  routes_meta: null                               # 复现时读取
  
  # 轨迹可视化
  plot_trajectories: true             # 生成真值轨迹图
  plot_individual: false              # 为每条轨迹生成单独的图（可选）
  plot_dir: trajectory_plots          # 轨迹图保存目录

  # 输出目录
  imu_out: data_cache
  vis_out: data_vis
  gns_out: data_gns

  # === 新增：engine_builtin 车辆动力学参数 ===
  # 车辆几何参数
  wheelbase: 2.7                      # [m] 轴距
  # 速度与加速度限制
  v_max: 25.0                         # [m/s] 最大速度（城市场景适中）
  a_lon_max: 2.5                      # [m/s²] 纵向加速度限制
  a_lat_max: 4.0                      # [m/s²] 侧向加速度限制
  # 转向系统参数
  delta_max_deg: 30.0                 # [deg] 最大转向角
  ddelta_max_deg: 25.0                # [deg/s] 转向角速度限制
  tau_delta: 0.3                      # [s] 转向系统时间常数
  # 曲率连续性参数（A+ 引擎核心）
  sigma_max: 4e-3                     # [1/m²] 曲率变化率限制（增加灵活性）
  jerk_lat_max: 2.0                   # [m/s³] 侧向加加速度限制（动态约束）
  # 场景与地形
  scenario: "city"                    # "city" 或 "highway"
  grade_sigma: "0.015,0.035"          # 坡度标准差范围（稍微增加地形变化）
  grade_tau_s: "80,200"               # 坡度变化时间常数

  # IMU（100 Hz）
  imu_window: 256
  imu_stride: 128

  # VIS（10 Hz）
  vis_window: 32
  vis_stride: 16
  noise_px: 0.35
  outlier_ratio: 0.05

  # GNSS（1 Hz）- 500秒长序列配置
  gns_win: 500                        # 500秒窗口长度，捕获长期轨迹特征
  gns_stride: 50                      # 步长设为50，增加数据重叠
  gns_arch_enable: true               # 启用 GARCH 模型
  base_sigma_en: [0.1, 0.1]          # 核心修正：0.1米 = 1分米
  base_sigma_u: 0.2                  # 核心修正：0.2米 = 2分米
  scene_bounds: [300, 500, 600, 400, 300]  # 更多样化的场景时长
  scene_gain_en: [1.0, 2.0, 3.5, 1.8, 1.0] # 场景增益可以暂时保留
  scene_gain_u:  [1.5, 2.5, 4.0, 2.2, 1.5] # 
  omega: 0.02                         # 稍微增加 GARCH 基础方差
  alpha: 0.25                         # 增强误差的自相关性
  beta: 0.65                          # 调整持续性参数
  p_out: 0.02                         # 更平滑的异常值概率
  t_df: 3.5                           # 更平滑的异常值分布
  vendor_bias: 1.3                    # 厂商误差偏置
  vendor_ln_jitter: 0.25              # 增加厂商误差的随机性

# —— GNSS 训练/评测（route=gns）
train_gns:
  route: gns
  train_npz: data_gns/train_gns.npz
  val_npz:   data_gns/val_gns.npz
  test_npz:  data_gns/test_gns.npz
  run_dir:   runs/gns_tcn_fix
  epochs: 120                         # 增加训练轮数，提高收敛稳定性
  batch_size: 32                      # 减小批次，更稳定的训练
  lr: 3e-4                            # 优化的学习率
  x_mode: both
  seed: 0
  # 建议的方差头边界与校准
  logv_min: -12
  logv_max: 6                         # 稳定的方差预测范围
  z2_center: 0.02                     # 从 1e-3 提升到 2e-2
  z2_center_target: auto              # 训练中自动根据 NLL 类型设定目标
  
  # 轴感知早停和按轴自适应加权
  early_axis: true                    # 使用"最差轴 |E[z²]-1|"做早停监控
  axis_auto_balance: true             # 启用按轴自适应平衡，优化U轴性能
  axis_power: 1.2                     # 稍微增加指数，更强调差异大的轴
  axis_clip: "0.5,2.0"                # 收紧权重范围，避免过分拉大某轴
  early_patience: 15                  # 增加耐心值
  student_nu: 3.0                     # 启用 Student-t NLL（nu=3）
  
  # 新增：逐轴 vendor 软锚（可先设 0 关掉）
  anchor_axes_weight: 0.0003
  
  # 新增：验证集温度缩放（自动把 z² 拉回 1）
  post_scale: true

model_gns:
  d_model: 96                         # 适中的模型容量
  n_tcn: 6                           # 适中的TCN层数
  kernel_size: 3
  n_heads: 2                         # 适中的注意力头数
  n_layers_tf: 1                     # 单层transformer
  dropout: 0.10                      # 适中的dropout

eval_gns:
  route: gns
  npz: data_gns/test_gns.npz
  model: runs/gns_tcn_fix/best.pt
  x_mode: both

analyze_gns:
  route: gns
  npz: data_gns/test_gns.npz
  model: runs/gns_tcn_fix/best.pt
  x_mode: both
  out: plots_gns
  use_loglog: true
